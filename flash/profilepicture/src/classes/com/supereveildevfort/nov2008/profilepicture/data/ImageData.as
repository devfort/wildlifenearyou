package com.supereveildevfort.nov2008.profilepicture.data {	import com.supereveildevfort.nov2008.profilepicture.model.FacialElement;		import com.supereveildevfort.nov2008.profilepicture.model.FacialElements;			import flash.events.EventDispatcher; 		/**	 * @class ImageData.as	 * @namespace com.supereveildevfort.nov2008.profilepicture.data	 * @author Niqui Merret	 * @version 1.0	 * @date Nov 24, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class ImageData extends EventDispatcher 	{				private static var mInstance : ImageData;		private static var allowInst : Boolean;		private var mFaces : FacialElements;		private var mMouths : FacialElements;		private var mFacialHair : FacialElements;		private var mNoses : FacialElements;		private var mCheeks : FacialElements;		private var mEyes : FacialElements;		private var mEars : FacialElements;		private var mHair : FacialElements;		private var mHairAccessories : FacialElements;		/**		 *********************************************************************************************************************************************************		 * 		 * public		 * 		 *********************************************************************************************************************************************************		 */				public function parseXML (pXML : XML) : void		{						mFaces = parseFaces(pXML, "face");			mMouths = parseFaces(pXML, "mouths");			mFacialHair = parseFaces(pXML, "facial-hairs");			mNoses = parseFaces(pXML, "noses");			mCheeks = parseFaces(pXML, "cheeks");			mEyes = parseFaces(pXML, "eyes");			mEars = parseFaces(pXML, "ears");			mHair = parseFaces(pXML, "hairs");			mHairAccessories = parseFaces(pXML, "hair-accessories");					}				/**		 *********************************************************************************************************************************************************		 * 		 * getters and setters		 * 		 *********************************************************************************************************************************************************		 */				public function get faces () : FacialElements		{			return mFaces;		}				public function get mouths () : FacialElements		{			return mMouths;		}				public function get facialHair () : FacialElements		{			return mFacialHair;		}				public function get noses () : FacialElements		{			return mNoses;		}				public function get cheeks () : FacialElements		{			return mCheeks;		}				public function get eyes () : FacialElements		{			return mEyes;		}				public function get ears () : FacialElements		{			return mEars;		}					public function get hair () : FacialElements		{			return mHair;		}				public function get hairAccessories () : FacialElements		{			return mHairAccessories;		}				/**		 *********************************************************************************************************************************************************		 * 		 * private		 * 		 *********************************************************************************************************************************************************		 */						private function parseFaces (pXML : XML, pElement : String) : FacialElements		{						var faces = new FacialElements();						var items:XMLList = pXML.pElement;			var len:int = items.length();			var i:int;						var faceList : Array = new Array();			var face : FacialElement;				for (i = 0; i < len; i++)			{				face = new FacialElement();				face.id = i;				face.uid = items[i].@id;				face.title = items[i].@title;				face.src = items[i].@src;								faceList.push(face);			}						faces.title = pXML.faces.@name;			faces.description = pXML.faces.@description;			faces.elements = faceList;						return faces;					}						/**		 *********************************************************************************************************************************************************		 * 		 * singleton hack		 * 		 *********************************************************************************************************************************************************		 */		 		 		public function ImageData()		{			if (!allowInst) {	            throw new Error("Error: Instantiation failed: Use ImageData.getInstance() instead of new.");	          }		}					public static function getInstance() : ImageData		{						if (mInstance == null)			{            	allowInst = true;				mInstance = new ImageData();				allowInst = false;				}						return mInstance;					}					}}