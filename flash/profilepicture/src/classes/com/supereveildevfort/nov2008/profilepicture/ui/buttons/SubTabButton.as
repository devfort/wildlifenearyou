package com.supereveildevfort.nov2008.profilepicture.ui.buttons {	import flash.text.TextFormat;		import com.niquimerret.accessibility.components.AccessButton;	import com.supereveildevfort.nov2008.profilepicture.ui.ArialText;			/**	 * @class SubTabButton.as	 * @namespace com.supereveildevfort.nov2008.profilepicture.ui.buttons	 * @author Niqui Merret	 * @version 1.0	 * @date Nov 24, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class SubTabButton extends AccessButton 	{		private var mActive : Boolean = true;		private var mDisplayLable : ArialText;		private var mActiveFormat : TextFormat;		private var mInActiveFormat : TextFormat;		private var mInActiveOverFormat : TextFormat;		public function SubTabButton (pLabel : String, pDescription : String = "")		{						super(pLabel, pDescription);		}		/**		 *********************************************************************************************************************************************************		 * getter and setters		 *********************************************************************************************************************************************************		 */		public function getLabel () : String		{			return mLabel;		}		public function get active () : Boolean		{			return mActive;		}		public function set active (pActive : Boolean) : void		{			mActive = pActive;			if (mActive) 			{				mDisplayLable.textFormat = mActiveFormat;			}			else			{				mDisplayLable.textFormat = mInActiveFormat;			}						mDisplayLable.autoWidth = true;		}		override protected function init () : void		{						super.init();						mInActiveFormat = new TextFormat(null, 12, 0x2E3192);			mInActiveOverFormat = new TextFormat(null, 12, 0x000000);			mActiveFormat = new TextFormat(null, 12, 0x42210B);						mDisplayLable = new ArialText(mLabel);			addChild(mDisplayLable);						mDisplayLable.textFormat = mActiveFormat;			mDisplayLable.autoWidth = true;					}		override protected function clickedAction () : void 		{			active = !mActive;		}						override protected function focusInAction () : void		{			if (!mActive)				mDisplayLable.textFormat = mInActiveOverFormat;		}						override protected function focusOutAction () : void		{			if (!mActive)				mDisplayLable.textFormat = mInActiveFormat;		}	}}