package com.supereveildevfort.nov2008.profilepicture {	import flash.display.LoaderInfo;			import com.gskinner.motion.GTween;		import com.supereveildevfort.nov2008.profilepicture.controllers.TabWindowController;		import com.supereveildevfort.nov2008.profilepicture.data.ProfileImageData;		import com.niquimerret.events.InteractionEvent;		import com.supereveildevfort.nov2008.profilepicture.ui.buttons.SaveButton;		import com.supereveildevfort.nov2008.profilepicture.ui.PictureDisplay;		import com.supereveildevfort.nov2008.profilepicture.events.ElementEvent;		import flash.events.Event;			import com.supereveildevfort.nov2008.profilepicture.data.ImageData;			import br.com.stimuli.loading.BulkErrorEvent;		import br.com.stimuli.loading.BulkProgressEvent;		import br.com.stimuli.loading.BulkLoader;			import flash.display.MovieClip; 		/**	 * @class AppController.as	 * @namespace com.supereveildevfort.nov2008.profilepicture	 * @author Niqui Merret	 * @version 1.0	 * @date Nov 24, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class AppController extends MovieClip 	{		public var staticCopy : MovieClip;		public var loader : MovieClip;						private var mBulkLoader : BulkLoader;		private var mTabs : TabWindowController;		private var mPictureDisplay : PictureDisplay;		private var mSaveButton : SaveButton;		private var mProfileXML : String;		private var mProfileImagesXML : String;		private var mProfileUpdate : String;		public function AppController()		{						staticCopy.alpha = 0;						//load in the paths			var varsObj:Object = LoaderInfo(this.root.loaderInfo).parameters;									if (varsObj.profile_xml == null)			{				mProfileXML = "http://10.0.1.5:8000/faces/profile.xml";			}			else			{				mProfileXML = varsObj.profile_xml;			}									if (varsObj.profile_images_xml == null)			{				mProfileImagesXML = "http://10.0.1.5:8000/faces/profile-images.xml";			}			else			{				mProfileImagesXML = varsObj.profile_images_xml;			}									if (varsObj.profile_update == null)			{				mProfileUpdate = "http://10.0.1.5:8000/faces/update/";			}			else			{				mProfileUpdate = varsObj.profile_update;			}						ProfileImageData.getInstance().setURL(mProfileUpdate);						init();					}				private function init() : void		{						mBulkLoader = new BulkLoader("main");            mBulkLoader.add(mProfileImagesXML);        	mBulkLoader.addEventListener(BulkProgressEvent.COMPLETE, onAllItemsLoaded);        	mBulkLoader.addEventListener(BulkErrorEvent.ERROR, onLoadError);    		mBulkLoader.start();		}				private function onAllItemsLoaded (e : BulkProgressEvent) : void		{			trace("onAllItemsLoaded");			var imageXML : XML = mBulkLoader.getXML(mProfileImagesXML);			ImageData.getInstance().parseXML(imageXML);			ImageData.getInstance().addEventListener(Event.COMPLETE, onLoadingComplete);		}				private function onLoadingComplete (e : Event) : void		{			mPictureDisplay = new PictureDisplay();			addChild(mPictureDisplay);			mPictureDisplay.x = 10;			mPictureDisplay.y = 50;			mPictureDisplay.alpha = 0;						mTabs = new TabWindowController(ImageData.getInstance().profileImages);			addChild(mTabs);			mTabs.y = mPictureDisplay.y + mPictureDisplay.height + 20;			mTabs.x = 10;			mTabs.alpha = 0;			mTabs.addEventListener(ElementEvent.FACEPART_SELECTED, onItemSelected);						mSaveButton = new SaveButton("Save");			addChild(mSaveButton);			mSaveButton.addEventListener(InteractionEvent.CLICKED, onSave);			mSaveButton.x = mPictureDisplay.width + mPictureDisplay.x - mSaveButton.width;			mSaveButton.y = mPictureDisplay.height + mPictureDisplay.y - mSaveButton.height;			mSaveButton.alpha = 0;						var picTween : GTween = new GTween(mPictureDisplay, 0.2, {alpha: 1});			var tabsTween : GTween = new GTween(mTabs, 0.2, {alpha: 1});			var saveTween : GTween = new GTween(mSaveButton, 0.2, {alpha: 1});			var staticTween : GTween = new GTween(staticCopy, 0.2, {alpha: 1});			loader.visible = false;					}		private function onSave (e : InteractionEvent) : void		{			ProfileImageData.getInstance().saveImage(mPictureDisplay.userImage);		}		private function onItemSelected (event : ElementEvent) : void		{			mPictureDisplay.element = event.facePart;		}		private function onLoadError (event : BulkErrorEvent) : void		{			trace(event.errors);		}	}}