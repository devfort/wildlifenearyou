package com.niquimerret.accessibility {	import flash.accessibility.Accessibility;	import flash.accessibility.AccessibilityProperties;	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Timer;			/**	 * @class Access.as	 * @namespace com.niquimerret.accessibility	 * @author Niqui Merret	 * @version 1.0	 * @date Aug 15, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class Access extends EventDispatcher	{		private static var mInstance : Access;		private static var mAllowInst : Boolean;		private var mCheckedAccess : Boolean = false;		private var mHasAccess : Boolean;		private var mCheckingAccess : Boolean = false;		private var mTimer : Timer;		private var mAccessObjects : Array;		public function Access ()		{			if (!mAllowInst) 			{				throw new Error("Error: Instantiation failed: Use Access.getInstance() instead of new.");			}			else			{				mAccessObjects = new Array();			}		}		public static function getInstance () : Access		{						if (mInstance == null)			{				mAllowInst = true;				mInstance = new Access();				mAllowInst = false;				}			return mInstance;		}		/**		 *********************************************************************************************************************************************************		 * public		 *********************************************************************************************************************************************************		 */		public function setAccessInfo (pTarget : DisplayObject, pName : String, pDescription : String = "") : void		{			if (mCheckedAccess)			{				if (mHasAccess)				{										setAccessProps(pTarget, pName, pDescription);					Accessibility.updateProperties();				}			}			else			{				checkAccess();				//add to que to set access				mAccessObjects.push({target : pTarget, name : pName, description : pDescription});			}		}		public function sendAccessEvent (pSrc : DisplayObject, pID : uint, pEventType : uint, pNonHTML : Boolean) : void		{			if (mCheckedAccess)			{				if (mHasAccess)				{										Accessibility.sendEvent(pSrc, pID, pEventType, pNonHTML);				}			}		}		/**		 *********************************************************************************************************************************************************		 * private		 *********************************************************************************************************************************************************		 */		private function setAccessProps (pTarget : DisplayObject, pName : String, pDescription : String = "") : void		{			var accProps : AccessibilityProperties = new AccessibilityProperties();			accProps.name = pName;						if (pDescription != "")			{				accProps.description = pDescription;			}						pTarget.accessibilityProperties = accProps;		}		private function checkAccess () : void		{						if (!mCheckingAccess)			{				mCheckingAccess = true;				mTimer = new Timer(20, 1);				mTimer.start();				mTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerCompleteHandler);			}		}		/**		 *********************************************************************************************************************************************************		 * events		 *********************************************************************************************************************************************************		 */		private function onTimerCompleteHandler (e : TimerEvent) : void		{						removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerCompleteHandler);			mCheckedAccess = true;						if (Accessibility.active)			{				mHasAccess = true;								var i : uint;				var len : uint = mAccessObjects.length;				for (i = 0;i < len; i++)				{					setAccessProps(mAccessObjects[i].target, mAccessObjects[i].name, mAccessObjects[i].description);				}								Accessibility.updateProperties();			}		}	}}