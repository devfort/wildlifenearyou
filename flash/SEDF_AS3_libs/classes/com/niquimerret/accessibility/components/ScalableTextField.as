package com.niquimerret.accessibility.components {	import flash.net.URLRequest;		import flash.events.TextEvent;		import flash.text.TextFieldAutoSize;		import flash.text.TextFormat;		import flash.text.TextField;import flash.net.navigateToURL;			/**	 * @class ScalableTextField.as	 * @namespace com.niquimerret.accessibility.components	 * @author Niqui Merret	 * @version 1.0	 * @date Sept 1, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class ScalableTextField extends AccessibleComponentBase 	{		public var displayTF : TextField;		public var displayTFB : TextField;				private var mDisplayText : TextField;		private var mTextFormat : TextFormat;				private var mHeight : Number;		private var mWidth : Number;		private var mAutoWidth : Boolean;		private var mAutoHeight : Boolean;				private var mTextValue : String;		public function ScalableTextField(pLabel : String, pDescription : String = "", pTextFormat : TextFormat = null) 		{						super(pLabel, pDescription);						mDisplayText = displayTF;			mDisplayText.selectable = false;						mTextFormat = new TextFormat();						if (pLabel != "")			{				mTextValue = pLabel;				mDisplayText.htmlText = mTextValue;			}			if (pTextFormat != null)			{				mTextFormat = pTextFormat;				mDisplayText.setTextFormat(mTextFormat);			}			else			{				mTextFormat = new TextFormat("Arial", 11, 0x000000);			}						//mouseEnabled = false;			//mouseChildren = false;						mDisplayText.wordWrap = false;			mDisplayText.multiline = false;			mDisplayText.autoSize = TextFieldAutoSize.LEFT;			mHeight = mDisplayText.height;			mWidth = mDisplayText.width;						mDisplayText.mouseWheelEnabled = false;			mDisplayText.addEventListener(TextEvent.LINK, onLinkHandler);		}				protected function onLinkHandler (e : TextEvent) : void		{			var link : URLRequest = new URLRequest(e.text);			navigateToURL(link);		}		/**		*********************************************************************************************************************************************************		* public		*********************************************************************************************************************************************************		*/				public function setLinkHandler (pLinkHandler : Function) : void		{			if (mDisplayText.hasEventListener(TextEvent.LINK))				mDisplayText.removeEventListener(TextEvent.LINK, onLinkHandler);			mDisplayText.addEventListener(TextEvent.LINK, pLinkHandler);		}				public function refreshDisplay() : void		{			updateDisplay();		}				public function setSingleLine() : void		{			mDisplayText.wordWrap = false;			mDisplayText.multiline = false;			mDisplayText.autoSize = TextFieldAutoSize.LEFT;			mWidth = mDisplayText.width;		}				public function setMultiLine(pWidth : Number) : void		{			mWidth = pWidth;			mDisplayText.width = mWidth;			mDisplayText.multiline = true;			mDisplayText.wordWrap = true;			mDisplayText.autoSize = TextFieldAutoSize.LEFT;		}						public function move (pX : Number, pY : Number) : void		{			x = pX;			y = pY;		}				/**		*********************************************************************************************************************************************************		* getters and setters		*********************************************************************************************************************************************************		*/						public function set selectable (pSelectable : Boolean) : void		{			mDisplayText.selectable = pSelectable;		}		public function get textFormat () : TextFormat		{			return mTextFormat;		}				public function set textFormat (pTextFormat : TextFormat) : void		{			mTextFormat = pTextFormat;			updateDisplay();		}				override public function set height(pHeight : Number) : void		{			mAutoHeight = false;			mHeight = pHeight;			mDisplayText.height = mHeight;		}				override public function get height() : Number		{			return mDisplayText.textHeight;			}		/*		override public function set tabIndex(pIndex : Number) : void		{			mDisplayText.tabIndex = pIndex;			}						override public function get tabIndex() : Number		{			return mDisplayText.tabIndex;			}				 * 		 */		public function set autoHeight(pAutoHeight : Boolean) : void		{			mAutoHeight = pAutoHeight;			if (mAutoHeight)			{				mDisplayText.autoSize = TextFieldAutoSize.LEFT;				mHeight = mDisplayText.height;			}			else			{				mDisplayText.height = mHeight;			}		}						public function get autoHeight() : Boolean		{			return mAutoHeight;		}				override public function set width(pWidth : Number) : void		{			mWidth = pWidth;			mAutoWidth = false;			mDisplayText.width = mWidth;		}				override public function get width() : Number		{			return mWidth;			}						public function set autoWidth(pAutoWidth : Boolean) : void		{			mAutoWidth = pAutoWidth;						if (mAutoWidth)			{				mDisplayText.wordWrap = false;				mDisplayText.multiline = false;				mDisplayText.autoSize = TextFieldAutoSize.LEFT;				mWidth = mDisplayText.width;			}			else			{				mDisplayText.width = mWidth;			}					}						public function get autoWidth() : Boolean		{			return mAutoWidth;		}				public function set text(pText : String) : void		{			mTextValue = pText;			updateDisplay();		}				public function get text() : String		{			return mTextValue;			}				/**		*********************************************************************************************************************************************************		* private		*********************************************************************************************************************************************************		*/				private function updateDisplay() : void		{			mDisplayText.htmlText = mTextValue;			mDisplayText.setTextFormat(mTextFormat);			}			}}