package com.niquimerret.accessibility.components {	import flash.events.MouseEvent;		import flash.events.FocusEvent;			import com.niquimerret.events.InteractionEvent;			import flash.display.Sprite; 		/**	 * @class AccessButton.as	 * @namespace com.niquimerret.accessibility.components	 * @author Niqui Merret	 * @version 1.0	 * @date Aug 16, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class AccessButton extends AccessibleComponentBase 	{		public function AccessButton (pLabel : String,  pDescription : String = "")		{						super(pLabel, pDescription);			mouseChildren = false;			tabChildren = false;			init();					}						/**		*********************************************************************************************************************************************************		* protected		*********************************************************************************************************************************************************		*/				protected function init() : void		{			enableEvents();		}				protected function enableEvents() : void		{			buttonMode = true;			useHandCursor = true;						if (!hasEventListener(MouseEvent.CLICK))				addEventListener(MouseEvent.CLICK, onClickHandler);						if (!hasEventListener(MouseEvent.ROLL_OVER))				addEventListener(MouseEvent.ROLL_OVER, onRollOverHandler);						if (!hasEventListener(MouseEvent.ROLL_OUT))				addEventListener(MouseEvent.ROLL_OUT, onRollOutHandler);						if (!hasEventListener(FocusEvent.FOCUS_IN))				addEventListener(FocusEvent.FOCUS_IN, onFocusInHandler);						if (!hasEventListener(FocusEvent.FOCUS_OUT))				addEventListener(FocusEvent.FOCUS_OUT, onFocusOutHandler);					}				protected function disableEvents() : void		{						buttonMode = false;			useHandCursor = false;						if (hasEventListener(MouseEvent.CLICK))				removeEventListener(MouseEvent.CLICK, onClickHandler);									if (hasEventListener(MouseEvent.ROLL_OVER))				removeEventListener(MouseEvent.ROLL_OVER, onRollOverHandler);						if (hasEventListener(MouseEvent.ROLL_OUT))				removeEventListener(MouseEvent.ROLL_OUT, onRollOutHandler);							if (hasEventListener(FocusEvent.FOCUS_IN))				removeEventListener(FocusEvent.FOCUS_IN, onFocusInHandler);						if (hasEventListener(FocusEvent.FOCUS_OUT))				removeEventListener(FocusEvent.FOCUS_OUT, onFocusOutHandler);				 		}							protected function focusInAction () : void		{		}						protected function focusOutAction () : void		{		}		protected function clickedAction () : void		{		}										/**		*********************************************************************************************************************************************************		* events		*********************************************************************************************************************************************************		*/		protected function onClickHandler (e : MouseEvent) : void		{			clickedAction();			dispatchEvent(new InteractionEvent(InteractionEvent.CLICKED));		}				protected function onRollOverHandler (e : MouseEvent) : void		{			focusInAction();			dispatchEvent(new InteractionEvent(InteractionEvent.FOCUS_IN));		}		protected function onFocusInHandler (e : FocusEvent) : void		{			focusInAction();			dispatchEvent(new InteractionEvent(InteractionEvent.FOCUS_IN));		}		protected function onRollOutHandler (e : MouseEvent) : void		{			focusOutAction();			dispatchEvent(new InteractionEvent(InteractionEvent.FOCUS_OUT));		}		protected function onFocusOutHandler (e : FocusEvent) : void		{			focusOutAction();			dispatchEvent(new InteractionEvent(InteractionEvent.FOCUS_OUT));		}	}}