package com.niquimerret.accessibility.components {	import com.niquimerret.events.InteractionEvent;		import com.niquimerret.accessibility.Access;			import flash.display.DisplayObject;			/**	 * @class ToggleButton.as	 * @namespace com.niquimerret.accessibility.components	 * @author Niqui Merret	 * @version 1.0	 * @date Aug 16, 2008	 * @description	 * @usage	 * NOTE:	 * TODO:	 *	 */	public class ToggleButton extends AccessButton 	{		private var mActiveState : DisplayObject;		private var mInActiveState : DisplayObject;		private var mActiveStateFocus : DisplayObject;		private var mInActiveStateFocus : DisplayObject;				private var mActive : Boolean = true;				private var mActiveLabel : String;		private var mInactiveLabel : String;				public function ToggleButton (pActiveState : DisplayObject, pInActiveState : DisplayObject, pActiveStateFocus : DisplayObject, pInActiveStateFocus : DisplayObject, pLabelActive : String, pLabelInactive : String, pDescription : String = "" )		{			super(pLabelInactive, pDescription);						mActiveState = pActiveState;			mInActiveState = pInActiveState;			mActiveStateFocus = pActiveStateFocus;			mInActiveStateFocus = pInActiveStateFocus;			mActiveLabel = pLabelActive;			mInactiveLabel = pLabelInactive;						addChild(mActiveState);			addChild(mInActiveState);			addChild(mActiveStateFocus);			addChild(mInActiveStateFocus);						mActiveState.visible = false;			mActiveStateFocus.visible = false;			mInActiveStateFocus.visible = false;					}				/**		*********************************************************************************************************************************************************		* getter and setters		*********************************************************************************************************************************************************		*/				public function get active() : Boolean		{			return mActive;		}				public function set active(pActive : Boolean) : void		{			mActive = pActive;			if (mActive) 			{				setLabel(mInactiveLabel);				Access.getInstance().sendAccessEvent(this, 0, 0x800a, false);				mActiveState.visible = false;				mInActiveState.visible = true;				mInActiveStateFocus.visible = false;				mActiveStateFocus.visible = false;			}			else			{				setLabel(mActiveLabel);				Access.getInstance().sendAccessEvent(this, 0, 0x800a, false);				mActiveState.visible = true;				mInActiveState.visible = false;				mInActiveStateFocus.visible = false;				mActiveStateFocus.visible = false;			}		}				/**		*********************************************************************************************************************************************************		* override		*********************************************************************************************************************************************************		*/				override protected function focusInAction () : void		{			if (mActive)			{				mInActiveState.visible = false;				mInActiveStateFocus.visible = true;			}			else			{				mActiveState.visible = false;				mActiveStateFocus.visible = true;			}		}						override protected function focusOutAction () : void		{			if (mActive)			{				mInActiveState.visible = true;				mInActiveStateFocus.visible = false;			}			else			{				mActiveState.visible = true;				mActiveStateFocus.visible = false;			}		}				override protected function clickedAction() : void 		{			active = !mActive;			dispatchEvent(new InteractionEvent(InteractionEvent.CLICKED));		}	}}